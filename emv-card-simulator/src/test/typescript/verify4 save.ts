import * as crypto from 'crypto';

const modulus = "135362253209113164836142929847417599068049081750282836314418620176265804533656198308147680572138117228230896618795174349134512308759897452914176852431860685473370067160633397478284638231854333889620976237897812395879211494456464028856749788423557965996372326191226234986624589409240231108419930422758400793597"
const exponent = "3"
const cipher = [107, 157, 208, 100, 69, 200, 167, 255, 144, 183, 159, 193, 87, 151, 96, 147, 52, 58, 19, 157, 11, 28, 77, 161, 86, 93, 107, 134, 99, 96, 101, 80, 52, 186, 239, 122, 132, 207, 210, 34, 79, 8, 129, 167, 195, 178, 101, 115, 80, 164, 216, 208, 11, 148, 52, 94, 208, 134, 240, 161, 69, 193, 0, 69, 10, 134, 201, 50, 195, 37, 101, 56, 162, 226, 195, 142, 21, 34, 176, 53, 147, 217, 251, 57, 92, 247, 242, 98, 204, 207, 161, 123, 89, 30, 157, 102, 95, 78, 21, 72, 210, 44, 78, 138, 213, 246, 193, 141, 22, 119, 144, 142, 240, 59, 207, 27, 61, 49, 12, 89, 19, 186, 207, 72, 124, 232, 231, 238]
const message = [106, 4, 18, 52, 86, 0, 18, 52, 86, 8, 255, 255, 18, 41, 18, 52, 86, 1, 1, 128, 1, 192, 195, 34, 159, 181, 218, 24, 208, 113, 132, 22, 221, 112, 196, 149, 177, 73, 90, 24, 56, 183, 161, 214, 175, 242, 192, 120, 171, 242, 77, 48, 115, 192, 203, 241, 248, 251, 125, 124, 78, 239, 146, 94, 0, 195, 87, 176, 157, 210, 237, 41, 107, 21, 137, 140, 192, 42, 10, 104, 190, 174, 181, 150, 174, 223, 126, 93, 122, 247, 113, 143, 72, 228, 212, 176, 27, 83, 252, 68, 78, 181, 129, 45, 62, 59, 193, 134, 147, 141, 113, 26, 137, 41, 109, 128, 170, 78, 211, 73, 178, 106, 253, 227, 193, 7, 34, 27, 152, 232, 11, 235, 96, 77, 153, 240, 152, 93, 67, 72, 212, 167, 217, 26, 222, 160, 151, 27, 253, 187, 187, 187, 187, 187, 187, 80, 137, 115, 80, 104, 72, 89, 60, 146, 211, 237, 172, 52, 199, 212, 228, 125, 180, 250, 209, 188]

// Convert modulus and exponent to a PEM encoded public key
const publicKey = crypto.createPublicKey({
  key: {
    n: Buffer.from(modulus, 'hex'),
    e: parseInt(exponent, 10),
  },
  format: 'jwk',
  type: 'spki',
});

// Convert message to a buffer
const isVerified = crypto.verify(
  null,
  Buffer.from(message),
  publicKey,
  Buffer.from(cipher)
);

console.log('Signature is valid:', isVerified);