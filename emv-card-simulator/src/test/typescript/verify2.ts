// Imports
import * as crypto from 'crypto';
import * as forge from 'node-forge';

// RSA parameters
const modulus = `BF08CA64EA24B2644772CA60DAE61A68DE449A1F43503A1025103BDE7487FF2D60E23AF37400BBB6A8075C79EB38D775ED5F251E15268128CA152DC5F33E017F14AE11FA2E07298F559387F4F47997DB09AEE867712E56545825C4B12A197C8ABE68E7E24A20B8717453733D0BF12F3CF8AA89CB9BD07A2468B6132410C1E62FD1DFEC2C5D7C35B5475C520783E01E549F4C44DECBC2A0587763851738E4CAF22EB0E8747DBF828C2207FECE8460030F`;
const exponent = '03'; 

const modulusBuffer = Buffer.from(modulus, 'hex');
const exponentBuffer = Buffer.from(exponent, 'hex');

// Message and signature
const message = Buffer.from([0x6A, 0x02, 0x12, 0x34, 0x56, 0xFF, 0x12, 0x30, 0x12, 0x34, 0x56, 0x01, 0x01, 0xB0, 0x01, 0xE2, 0xB3, 0xCB, 0x08, 0xDA, 0x28, 0xEF, 0x75, 0xFE, 0x17, 0x3E, 0x32, 0x96, 0xE7, 0x2A, 0x70, 0x10, 0x2A, 0x50, 0x70, 0xEE, 0xD5, 0xD6, 0x41, 0xEF, 0x5A, 0x24, 0x62, 0x31, 0x0F, 0xE5, 0xB3, 0x60, 0x10, 0xF2, 0xEC, 0x60, 0x65, 0xC4, 0x07, 0x49, 0x52, 0xD1, 0xF5, 0xCB, 0xBB, 0x41, 0x6F, 0xF2, 0x42, 0x3F, 0xA6, 0x92, 0x47, 0x3B, 0x72, 0xC3, 0x6D, 0x22, 0x90, 0x21, 0x50, 0x82, 0x1C, 0xB7, 0xBC, 0xA5, 0xDB, 0x1D, 0x2A, 0xF4, 0x1D, 0x19, 0xE8, 0xCA, 0x59, 0x0C, 0x63, 0xFF, 0x26, 0xF8, 0xB1, 0x2A, 0x34, 0x16, 0xA1, 0xDE, 0xF1, 0x36, 0x0E, 0xDC, 0xB5, 0x6A, 0x68, 0xAC, 0x00, 0x7D, 0x22, 0x26, 0xD5, 0x6D, 0x65, 0xB3, 0x31, 0xD3, 0x42, 0x3C, 0x62, 0x87, 0xB7, 0xC4, 0xC4, 0x2B, 0x8E, 0x64, 0xB1, 0xB4, 0x26, 0x7A, 0x0D, 0x59, 0xBF, 0xF2, 0xA6, 0xC4, 0x1A, 0x1E, 0xDB, 0x0B, 0xFE, 0xDD, 0xE0, 0x5E, 0xC7, 0xF9, 0x2E, 0xCE, 0x81, 0xEB, 0x65, 0x0C, 0xF4, 0x10, 0xD3, 0x71, 0x70, 0x7F, 0xF2, 0x46, 0x9D, 0x8A, 0xD8, 0xC8, 0x23, 0xF4, 0x72, 0x48, 0xDE, 0x16, 0xAD, 0xBC]);
const signature = Buffer.from([0x20, 0x08, 0xFB, 0x40, 0xDD, 0xA8, 0x99, 0x99, 0xAF, 0x87, 0x3A, 0x0D, 0x9B, 0xAB, 0x15, 0x8C, 0x5A, 0x0E, 0x34, 0x4F, 0xE3, 0x8F, 0x72, 0x05, 0x3C, 0xC5, 0xEC, 0xCF, 0xE4, 0x96, 0xBB, 0xA5, 0x8B, 0x37, 0xD6, 0x69, 0xA8, 0xB9, 0xB6, 0x69, 0x87, 0x7F, 0x32, 0x97, 0x35, 0xE0, 0x27, 0x12, 0x2C, 0x83, 0x2B, 0x28, 0xE7, 0x12, 0x56, 0x55, 0x45, 0x82, 0x5C, 0x4B, 0x12, 0xA1, 0x97, 0xC8, 0xAB, 0xE6, 0x8E, 0x7E, 0x24, 0xA2, 0x0B, 0x87, 0x17, 0x45, 0x37, 0x33, 0xD0, 0xBF, 0x12, 0xF3, 0xCF, 0x8A, 0xA8, 0x9C, 0xB9, 0xBD, 0x07, 0xA2, 0x46, 0x8B, 0x61, 0x32, 0x41, 0x0C, 0x1E, 0x62, 0xFD, 0x1D, 0xFE, 0xC2, 0xC5, 0xD7, 0xC3, 0x5B, 0x54, 0x75, 0xC5, 0x20, 0x78, 0x3E, 0x01, 0xE5, 0x49, 0xF4, 0xC4, 0x4D, 0xEC, 0xBC, 0x2A, 0x05, 0x87, 0x76, 0x38, 0x51, 0x73, 0x8E, 0x4C, 0xAF, 0x22, 0xEB, 0x0E, 0x87, 0x47, 0xDB, 0xF8, 0x28, 0xC2, 0x20, 0x7F, 0xEC, 0xE8, 0x46, 0x00, 0x30, 0xF]);

// Convert signature to hex string
const signatureHex = signature.toString('hex');

// Create a forge public key
const forgePublicKey = forge.pki.rsa.setPublicKey(
  forge.util.createBuffer(modulusBuffer, 'raw'),
  forge.util.createBuffer(exponentBuffer, 'raw')
);

// Convert forge public key to PEM format
const pemPublicKey = forge.pki.publicKeyToPem(forgePublicKey);

// Use this PEM-formatted key for verification
const verifier = crypto.createVerify('SHA256');
verifier.update(message);
const isVerified = verifier.verify(pemPublicKey, signature, 'hex');

console.log(isVerified);