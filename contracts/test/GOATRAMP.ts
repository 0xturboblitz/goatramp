import { time, loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { anyValue } from "@nomicfoundation/hardhat-chai-matchers/withArgs";
import { expect } from "chai";
import { ethers } from "hardhat";
const fs = require('fs');

const proof = JSON.parse(fs.readFileSync('../circuits/outputs/proof.json', 'utf8'));
const publicSignals = JSON.parse(fs.readFileSync('../circuits/outputs/publicSignals.json', 'utf8'));

const a = ["0x14b498797e98cce1ebbc390fe9b33d4e08c5ec98dbf582c2bf157238178078b1", "0x04ed5999c13d93a42b271ecfda70d2d05604fb6788bd5a4d1154ff86884b5615"]
const b = [["0x023c106af991e79a7720383e5fabecc4e133671f9b43bfec54be010038473e1c", "0x1ab14fa8a9ab0569a098a9d2b9c85f0b2fb258fec592041918e97dd711f846fd"],["0x27c11f89a680df7ffd69b1c09c9bf5f5b45621803d78c0a56acc1dca66fddbef", "0x1a4624039d4a0ac397ea4d67ced4f1b3e0b174cbb36a5f0f420bd2231ab9a868"]]
const c = ["0x118ac968e82f0f615c53a00f80953fe19e4dce80fe7808ef98bc7bbed74e4800", "0x2998e70aaceb1ca99d242e0f406727d6e66b6715a60ee009e5506d99816e9e28"]
const inputs = ["0x000000000000000000000000000000000000000000000000a7d91adea0971bfd","0x0000000000000000000000000000000000000000000000004d99f0985d4348d4","0x00000000000000000000000000000000000000000000000007221b98e80beb60","0x0000000000000000000000000000000000000000000000004ed349b26afde3c1","0x0000000000000000000000000000000000000000000000008d711a89296d80aa","0x000000000000000000000000000000000000000000000000b5812d3e3bc18693","0x000000000000000000000000000000000000000000000000e4d4b01b53fc444e","0x000000000000000000000000000000000000000000000000df7e5d7af7718f48","0x0000000000000000000000000000000000000000000000002a0a68beaeb596ae","0x000000000000000000000000000000000000000000000000d2ed296b15898cc0","0x000000000000000000000000000000000000000000000000ef925e00c357b09d","0x000000000000000000000000000000000000000000000000c0cbf1f8fb7d7c4e","0x000000000000000000000000000000000000000000000000f2c078abf24d3073","0x000000000000000000000000000000000000000000000000495a1838b7a1d6af","0x000000000000000000000000000000000000000000000000718416dd70c495b1","0x000000000000000000000000000000000000000000000000c0c3229fb5da18d0","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x00000000000000000000000000000000000000000000000067b81fa8eaba45bc","0x0000000000000000000000000000000000000000000000005bbedc6129e0fd1e","0x000000000000000000000000000000000000000000000000bbbbbbe360d1bf96","0x000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbb","0x000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbb","0x000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbb","0x000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbb","0x000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbb","0x000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbb","0x000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbb","0x000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbb","0x000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbb","0x000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbb","0x000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbb","0x000000000000000000000000000000000000000000000000bbbbbbbbbbbbbbbb","0x0000000000000000000000000000000000000000000000006a05010351373ebb","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000"]

describe("GoatRamp", function () {
  async function deployFixture() {
    const [owner, otherAccount] = await ethers.getSigners();

    const CreditCardVerifier = await ethers.getContractFactory("CreditCardVerifier");
    const ccVerifier = await CreditCardVerifier.deploy();

    console.log("otherAccount", otherAccount.address);
    console.log("owner", owner.address);
    await ccVerifier.waitForDeployment();

    console.log(`CreditCardVerifier deployed to ${ccVerifier.target}`);

    const GoatRamp = await ethers.getContractFactory("GOATRAMP");
    const goatRamp = await GoatRamp.deploy(ccVerifier.target);
  
    await goatRamp.waitForDeployment();
  
    console.log(`GOATRAMP deployed to ${goatRamp.target}`);
    return { ccVerifier, goatRamp, owner, otherAccount };
  }

  describe("Deployment", function () {
    it("Should allow a valid proof", async () => {
      const { ccVerifier } = await loadFixture(deployFixture);

      expect(
        await ccVerifier.verifyProof(a as any, b as any, c as any, inputs)
      ).to.be.true;
    });

    it("Shouldn't allow an invalid proof", async function () {
      const { ccVerifier } = await loadFixture(deployFixture);

      a[0] =
        "0x1cdbaf59a0439d55f19162ee0be5a501f5b55c669a6e1f8d27b75d95ff31ff7b"; // invalid a

      expect(
        ccVerifier.verifyProof(a as any, b as any, c as any, inputs)
      ).to.be.revertedWith("Invalid proof");
    });

  });
});

function decimalToHex(decimalString: string): string {
  let hex = BigInt(decimalString).toString(16);
  return hex.length % 2 ? "0x0" + hex : "0x" + hex;
}
